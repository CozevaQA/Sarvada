customer_ids=["2200"]
sample_logger=1
run_from="CS"
#throws TimeoutException
check_contact_log(driver,  wb, sample_logger, run_from ,customer_ids)

def check_contact_log(driver,workbook,sample_logger,run_from,customer_ids):
    # xpaths

    dropdown_icon_xpath = '//li[@id="messaging_stickets_access"]//child::i[@class="material-icons header-toggle"]'
    contact_log_link_xpath = '//*[text()="Contact Log"]'
    first_column_xpath = '//th[text()="Patient"]'
    records_xpath = '//tbody//tr'
    no_of_records_xpath='//div[@class="dataTables_info"]'
    columns_xpath='//thead//tr//th'
    list_of_patient_xpath='//tbody//tr//child::a'
    next_xpath='//button[text()="Next"]'
    previous_xpath = '//button[text()="Previous"]'
    name_column_xpath='//tbody//tr//child::a'
    filter_xpath='//i[text()="filter_list"]'
    patient_name_placeholder_xpath='//input[@title="Patient"]'
    apply_xpath='//a[@class="rfloat green-text datatable_apply" and text()="Apply"]'
    file_download = '//a[text()="file_download"]'
    visible_UL = '//ul[@id="datatable_bulk_filter_0_contact_log"]'
    link_to_click = '//a[text()="Export all to CSV "]'
    stickets_alert = '//div[@id="stickets_alert"]'
    yes_accept = '//div[@id = "stickets_alert"]//child::a[text() = "YES"]'
    toast_message_appears = '//div[ @ class = "toast green green-text lighten-5 text-darken-3 drupal_message drupal_status_message"]'
    encounter_dos_xpath='//tbody//child::tr[@role="row"]//child::td[5]'
    dos_dos_xpath='//tbody//child::tr[@role="row"]//child::td[14]'
    no_actual_record_xpath='//*[text()="No matching records found"]'
    notification_icon = '//a[@id="notification_button"]//span'
    no_of_notifications = '//a[@id ="notification_button"]//span'
    notification_panel = '//div[@id="notification_panel" and @class="dropdown-content loaded"]'
    notification_received= '//div[@class ="notif-message " and text()="Your request for all Contact Log Extract has been completed."]'
    link_to_download_click='//a[@style="color: #114C7F; font-weight: bold;"]'
    banner_remove_xpath='//div[@class="banner_footer"]//child::a[text()="Hide"]'



    for customer_id in customer_ids:
        # create worksheet and add headers
        sheet = workbook.create_sheet('Contact Log')
        headers = ["Test Area", "Test Case", "Status", "Comments/Time taken(in s)"]
        sheet.append(headers)

        # Apply styles to the header
        for cell in sheet["1"]:
            cell.fill = PatternFill(start_color="9BC2E6", end_color="9BC2E6", fill_type="solid")
            cell.font = Font(bold=True)

        workbook.save(str(customer_id) + "Report.xlsx")

        driver.get(secure_messaging_page_getURL(customer_id))
        wait_to_load(driver, 300)
        print("Opened Secure Messaging ")

        # Page loaded assertion
        try:
            dropdown_icon = driver.find_element(By.XPATH, dropdown_icon_xpath)
            contact_log_link = driver.find_element(By.XPATH, contact_log_link_xpath)
            action_click(driver, dropdown_icon)
            driver.execute_script("arguments[0].scrollIntoView();", contact_log_link)
            action_click(driver, contact_log_link)
            start = datetime.now()
            print("Clicked on Contact Log")
            try:
                banner_remove = driver.find_element(By.XPATH, banner_remove_xpath)
                action_click(driver, banner_remove)
            except NoSuchElementException as e:
                print(e)
            # wait_to_load(driver)
            timeout = 300
            try:
                WebDriverWait(driver, timeout).until(EC.visibility_of_element_located((By.XPATH, first_column_xpath)))
                # records = len(driver.find_elements(By.XPATH, records_xpath))
                print("Opened Contact Log")
                end = datetime.now()
            except NoSuchElementException:
                print("Page Failed to Load")

            print("Time taken to load ", (end - start).total_seconds(), "s")
            if ((end - start).total_seconds() > 60):
                test_case1_status = ["Page Load", "Verify if Page is loading within proper time ",
                                     "FAIL(Too much time to load)", (end - start).total_seconds()]
                sheet.append(test_case1_status)
            else:
                test_case1_status = ["Page Load", "Verify if Page is loading within proper time ", "PASS",
                                     (end - start).total_seconds()]
                sheet.append(test_case1_status)
        except (
        NoSuchElementException, ElementClickInterceptedException, ElementNotInteractableException, TimeoutException):
            test_case1_status = ["Page Load", "Page failed to load", "FAIL", driver.current_url]
            sheet.append(test_case1_status)

            # Apply conditional formatting
        for cell in sheet["C"][1:]:
            if "FAIL" in str(cell.value).upper():
                cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")  # Red background
            elif "PASS" in str(cell.value).upper():
                cell.fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")  # Green background

        workbook.save(str(customer_id) + "Report.xlsx")

        # Column header assertion - Verifies if column is missing/added
        column_list = driver.find_elements(By.XPATH, columns_xpath)
        actual_columns = []
        for column in column_list:
            actual_columns.append(column.get_attribute("innerHTML"))
        print(actual_columns)
        #
        column_header_match = False
        expected_columns = ['&nbsp;', 'Patient', 'PCP', 'Practice', 'Encounter Date', 'Route', 'Contacted By',
                            'With Whom', 'Encounter Status', 'Encounter Note', 'Created By', 'Measure Status',
                            'Measure Note', 'DOS', 'Compliance Status', 'Health Plan', 'Organization', '&nbsp;']
        if (actual_columns == expected_columns):
            print("Column set matched ! ")
            column_header_match = True
            test_case2_status = ["Column headers", "Verify if columns are not missing or changed ", "PASS",
                                 "No of columns present " + str(len(expected_columns) - 2)]
            sheet.append(test_case2_status)
        else:
            column_header_match = False
            test_case2_status = ["Column headers", "Verify if columns are not missing or changed ", "FAIL",
                                 "No of columns displayed " + str(len(actual_columns) - 2)]
            sheet.append(test_case2_status)
            print("Column set mismatch : Please check expected and actual columns")

        for cell in sheet["C"][1:]:
            if "FAIL" in str(cell.value).upper():
                cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")  # Red background
            elif "PASS" in str(cell.value).upper():
                cell.fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")  # Green background

        workbook.save(str(customer_id) + "Report.xlsx")

        # No of Records Assertion
        records = len(driver.find_elements(By.XPATH, records_xpath))
        print("No of records ", records)
        # check next button enabled or not
        try:
            next = driver.find_element(By.XPATH, next_xpath)
            number_displayed = driver.find_element(By.XPATH, no_of_records_xpath).get_attribute("innerHTML")
            previous = driver.find_element(By.XPATH, previous_xpath)
        except Exception as e:
            print(e)
        # Column Values assertion : # will check if the column header are passed

        # extract value of each column in a separate list

        date_validation_encounter_date = []
        date_validation_dos = []
        if (column_header_match == True):

            # extract values in Encounter Date
            try:
                encounter_dates_values = driver.find_elements(By.XPATH, encounter_dos_xpath)
                for encounter_date in encounter_dates_values:
                    date_validation_encounter_date.append(encounter_date.get_attribute("innerHTML"))

                # extract values in dos
                dos_dates_values = driver.find_elements(By.XPATH, dos_dos_xpath)
                for dos_date in dos_dates_values:
                    date_validation_dos.append(dos_date.get_attribute("innerHTML"))

                print(date_validation_encounter_date)
                print(date_validation_dos)

            except NoSuchElementException as e:
                print("Cant extract column values")

            # verify in each of the format is valid , if all passes good, otherwise pass the record number and failed value

            date_validation_encounter_date_status = "PASS"
            for item in date_validation_encounter_date:
                if (is_valid_datetime(item)):
                    continue
                else:
                    date_validation_encounter_date_status = "FAIL"
                    break

            # add the addition to sheet

            if (date_validation_encounter_date_status == "PASS"):
                test_case8_status = ["Date Format Validation ",
                                     "Verify if Date format is correct for Encounter DOS column ", "PASS",
                                     "Date Format is correctly displayed"]

            else:
                test_case8_status = ["Date Format Validation ",
                                     "Verify if Date format is correct for Encounter DOS column ", "FAIL",
                                     "Date Format is incorrectly displayed"]

            # do the same for DOS column

            dos_date_status = "PASS"
            for item in date_validation_dos:
                if (is_valid_datetime(item) or len(item) == 0):
                    continue
                else:
                    dos_date_status = "FAIL"
                    break

            # add the addition to sheet

            if (dos_date_status == "PASS"):
                test_case9_status = ["Date Format Validation ",
                                     "Verify if Date format is correct for DOS column ", "PASS",
                                     "Date Format is correctly displayed"]

            else:
                test_case9_status = ["Date Format Validation ",
                                     "Verify if Date format is correct for  DOS column ", "FAIL",
                                     "Date Format is incorrectly displayed"]

            sheet.append(test_case8_status)
            sheet.append(test_case9_status)

            for cell in sheet["C"][1:]:
                if "FAIL" in str(cell.value).upper():
                    cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE",
                                            fill_type="solid")  # Red background
                elif "PASS" in str(cell.value).upper():
                    cell.fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE",
                                            fill_type="solid")  # Green background

            workbook.save(str(customer_id) + "Report.xlsx")

        # Pagination Test Case
        pagination_possible = False
        if (next.is_enabled() and records == 40):
            pagination_possible = True
            print("No of records is more than 40")
            test_case3_status = ["Number of Records ", "No of records is more than 40", "PASS", number_displayed]
            sheet.append(test_case3_status)
        elif records < 40:
            test_case3_status = ["Number of Records ", "No of records is less than 40", "PASS", number_displayed]
            sheet.append(test_case3_status)
            print("No of Records is less than 40")
        else:
            test_case3_status = ["Next is disabled : Please check ", "FAIL",
                                 number_displayed + " " + driver.current_url]
            sheet.append(test_case3_status)
            print("Check Pagination")

        for cell in sheet["C"][1:]:
            if "FAIL" in str(cell.value).upper():
                cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")  # Red background
            elif "PASS" in str(cell.value).upper():
                cell.fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")  # Green background

        workbook.save(str(customer_id) + "Report.xlsx")
        # Check if next is enabled , navigate more than 5 times, compare the record and specify the number of pages checked
        # Check Pagination
        test_case4_status = []
        if (pagination_possible):
            test_case4_status = ["Pagination Verification ", "Not implemented yet",]
        else:
            test_case4_status = ["Pagination Verification ", "Verify if user can navigate more than 1 page",
                                 "No of records is less than 40 , check for another customer"]
        sheet.append(test_case4_status)

    #if next is disabled within 5 times, compare the record




    for cell in sheet["C"][1:]:
        if "FAIL" in str(cell.value).upper():
            cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")  # Red background
        elif "PASS" in str(cell.value).upper():
            cell.fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")  # Green background

    workbook.save(str(customer_id)+"Report.xlsx")

    #Check Filter
    filter_pass=False

    if(records>1):
        try:
            member_name_all_list=[]
            member_names=driver.find_elements(By.XPATH,name_column_xpath)
            for member_name in member_names:
                member_name_all_list.append(member_name.get_attribute("innerHTML"))
            member_name_set=set(member_name_all_list)
            member_name_list=list(member_name_set)
            print(member_name_list)
            #extract two patient name
            i=1
            while(i<=2):
                #Click on filter
                filter=driver.find_element(By.XPATH,filter_xpath)
                action_click(driver,filter)
                #Apply Patient Name
                patient_name_placeholder=driver.find_element(By.XPATH,patient_name_placeholder_xpath)
                driver.execute_script("arguments[0].scrollIntoView(true);", patient_name_placeholder)
                patient_name_placeholder.clear()
                patient_name_placeholder.send_keys(member_name_list[i-1])
                print("checking for",member_name_list[i-1])
                #Click on Apply

                apply=driver.find_element(By.XPATH,apply_xpath)
                driver.execute_script("arguments[0].scrollIntoView(true);", apply)
                action_click(driver,apply)
                print("Applied filter")
                #count number of records
                start_2 = datetime.now()
                time.sleep(5)
                WebDriverWait(driver, 300).until(EC.visibility_of_element_located((By.XPATH, no_of_records_xpath)))
                print("Opened Filtered List")
                end_2 = datetime.now()
                print("Time taken to Filter ", (end_2 - start_2).total_seconds()-5, "s")

                records_2 = len(driver.find_elements(By.XPATH, records_xpath))
                print("No of records after filter ", records_2)
                if(records_2==1):
                    try:
                        no_actual_record = driver.find_element(By.XPATH, no_actual_record_xpath)
                        filter_pass=False
                        break
                    except NoSuchElementException as e:
                        filter_pass = True


                filter_pass=True
                if(records_2==0):
                    filter_pass=False
                    break
                #decide result
                i=i+1
            #enter into
        except Exception as e :
            print(str(e))
    if(filter_pass==True and records>1):
        test_case5_status=["Filter","Verify if Filter for Patient Name is working properly","PASS","Patient name filter working",]
    elif(filter_pass==True and records==1):
        test_case5_status = ["Filter","Verify if Filter for Patient Name is working properly ", "No records ", "Check different customer " ]
    elif (filter_pass==False):
        test_case5_status = ["Filter","Verify if Filter for Patient Name is working properly", "FAIL","Check manually " +driver.current_url]

    sheet.append(test_case5_status)
    for cell in sheet["C"][1:]:
        if "FAIL" in str(cell.value).upper():
            cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")  # Red background
        elif "PASS" in str(cell.value).upper():
            cell.fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")  # Green background

    workbook.save(str(customer_id)+"Report.xlsx")
    print("File saved as "+str(customer_id)+"Report.xlsx")

